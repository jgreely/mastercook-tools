#!/usr/bin/env perl

# combine any number of recipe files into one sorted by name, with
# duplicates (by MD5 checksum) deleted.

use strict;
use Digest::MD5 qw(md5_base64);
use Getopt::Long qw(:config no_ignore_case bundling);

my $mmcfix;
my $titlecase;
GetOptions("titlecase|t" => \$titlecase, "mmcfix|m" => \$mmcfix)
	or die "Usage: $0 [--titlecase] [--mmcfix] [mx2file]\n";

push (@ARGV,'-') unless @ARGV;

my @recipe;
my %md5;
foreach my $file (@ARGV) {
	my $In;
	if ($file eq '-') {
		open($In,"<-:bytes");
	}else{
		open($In,"<:bytes",$file) or die "$0: $file: $!\n";
	}
	my $recipe;
	my $name;
	my $insumm;
	my $inrecipe;
	my $file = slurp($In);
	close($In);
	$file =~ s/></>\n</g;
	$file =~ tr/\r//d;
	foreach (split(/\n/, $file)) {
		$_ .= "\r\n";
		if (/^<RcpE/) {
			# have to do it this way to deal with unescaped '"' in name
			my $tmp = $_;
			$tmp =~ s/ img="[^"]*"//;
			$tmp =~ s/ author="([^"]*)"//;
			($name) = $tmp =~ /name="(.*)"/;
			$inrecipe = 1;
			if ($titlecase) {
				my $newname = join(' ',map(ucfirst($_),split(' ',$name)));
				s/"$name"/"$newname"/;
				$name = $newname;
			}
			# strip recipe image reference
			s/ img="[^"]*"//;
			$recipe = $_;
		}elsif (/^<\/RcpE/) {
			$recipe .= "</RcpE>\r\n";
			# clean up leading blank lines inside tags
			$recipe =~ s/>[\r\n]+/>\r\n/g;
			# clean up trailing blank lines inside tags
			$recipe =~ s/[\r\n]+\r\n</\r\n</g;
			# undo line-wrapping of attribute-only tags
			$recipe =~ s|(\r\n<[^/][^>\r\n]+>)\r\n</|$1</|g;
			# fix mymastercook schema errors
			$recipe = mmcfix($recipe) if $mmcfix;
			my $md5 = md5_base64($recipe);
			next if $md5{$md5}++;
			push(@recipe,{name => $name, recipe => $recipe});
			$name = undef;
			$inrecipe = 0;
		}elsif (/^<Summ/) {
			$insumm = 1;
		}elsif (/<\/Summ>/) {
			$insumm = 0;
		}elsif ($insumm) {
			next;
		}elsif (/<\/mx2>/) {
			next;
		}elsif (defined $name) {
			# strip empty ingredient unit ("1 egg", "2 onions", etc)
			s/\s*unit="\s*"// if /IngR/;
			# convert <open>text\n?<close>\n to <open>\ntext\n<close>\n
			$_ = "$1\r\n$2\r\n" if m|^(<[^>/]+>)([^<]+)(</.*>)?\s*$|;
			$_ .= "$3\r\n" if defined $3;
			# fix self-closing tags, strip completely empty ones
			if (m|^<([^/]\S{3,})(.*)/>.*$|) {
				if ($2 =~ /^\s*$/) {
					next;
				} else {
					$_ = "<$1$2>\r\n</$1>\r\n";
				}
			}
			$recipe .= $_;
		}
	}
	close(In);
}
if (@recipe) {
	print STDERR "WARNING! MasterCook limit is 12000 recipes per file (",
		@recipe+0," found)\n" if @recipe > 12000;
	print <<EOF;
<?xml version="1.0" standalone="yes" encoding="ISO-8859-1"?>\r
<!DOCTYPE mx2 SYSTEM "mx2.dtd">\r
<mx2 source="mx2cat" date="">\r
<Summ>\r
EOF
	foreach my $ref (sort { $a->{name} cmp $b->{name} } @recipe) {
		print "<Nam>\r\n",$ref->{name},"\r\n</Nam>\r\n";
	}
	print "</Summ>\r\n";
	foreach my $ref (sort { $a->{name} cmp $b->{name} } @recipe) {
		print $ref->{recipe};
	}
	print "</mx2>\r\n";
}
exit 0;

sub slurp {
	my ($fh) = @_;
	do {local $/; <$fh>}
}

# Recipes downloaded from My MasterCook do not validate against the DTD.
# 1. elements are in the wrong order
# 2. required attributes are missing
#
use feature 'switch';
no warnings 'experimental';
sub mmcfix {
	local ($_) = @_;
	s|^(<RcpE[^>]*>\r\n)||;
	my $result = $1;
	foreach my $tag (qw(RTxt Serv PrpT CatS IngR DirS Desc Natn Srce
			AltS CpyR Yield TTim AltT RatS Wine SrvI Note Nutr)) {
		while (m|<$tag|) {
			s|(<$tag.*?</$tag>\r\n)||s;
			my $tmp = $1;
			foreach ($tag) {
				when ('IERp') {
					insert_attr($tmp, 'refname');
				}
				when (['PrpT','TTim']) {
					insert_attr($tmp, 'elapsed');
				}
				when ('AltT') {
					insert_attr($tmp, 'label');
					insert_attr($tmp, 'elapsed');
				}
				when ('AltS') {
					insert_attr($tmp, 'label');
					insert_attr($tmp, 'source');
				}
				when ('Serv') {
					insert_attr($tmp, 'qty');
				}
				when ('Yield') {
					insert_attr($tmp, 'unit');
					insert_attr($tmp, 'qty');
				}
				when ('RatE') {
					insert_attr($tmp, 'name');
					insert_attr($tmp, 'value');
				}
			}
			$result .= $tmp;
		}
	}
	$result .= "</RcpE>\r\n";
	return $result;
}

sub insert_attr {
	my $attr = pop(@_);
	$_[0] =~ s/\s*>/ $attr="">/ unless $_[0] =~ /$attr/;
}
