#!/usr/bin/env perl

# match on any number of regexps (name, ingredient, anywhere) in one
# or more recipe files, and generate a valid MX2 file from the results.

use strict;
use Digest::MD5 qw(md5_base64);
use Getopt::Long qw(:config no_ignore_case bundling);
use HTML::Entities;

my @name;
my @ingredient;
my @anywhere;
my @category;
my $listonly;
my $except;
my $Usage = <<EOF;
Usage: $0 [options] [file ...]
    -l list recipe names only, rather than full recipes.
    -v invert selection, matching recipes not containing any of the filters.
    -n name
    -c category/cuisine (interchangeable in a lot of source files)
    -i ingredient
    -a any

Only recipes matching *all* specified filter will be returned.
-i, -n, -c, and -a can be repeated as many times as you like.
EOF
GetOptions(
	"anywhere|a=s" => \@anywhere,
	"category|c=s" => \@category,
	"ingredient|i=s" => \@ingredient,
	"listonly|l" => \$listonly,
	"name|n=s" => \@name,
	"except|v" => \$except,
) or die $Usage;

push (@ARGV,'-') unless @ARGV;

die $Usage unless @name or @ingredient or @anywhere or @category;
foreach (@ingredient) {
	$_ = qr/^<IngR.*\b$_/miaa;
}
foreach (@anywhere) {
	$_ = qr/$_/i;
}
foreach (@name) {
	$_ = qr/$_/i;
}
foreach (@category) {
	$_ = qr/<(Natn|CatT)>[^<]*$_/i;
}
my $match = $except ? 0 : @anywhere + @ingredient + @name + @category;

my @recipe;
foreach my $file (@ARGV) {
	my $In;
	if ($file eq '-') {
		open($In,"<-:bytes");
	}else{
		open($In,"<:bytes",$file) or die "$0: $file: $!\n";
	}
	my $recipe;
	my %md5;
	my $name;
	my $insumm;
	my $inrecipe;
	my $file = slurp($In);
	close($In);
	$file =~ s/></>\n</g;
	$file =~ tr/\r//d;
	foreach (split(/\n/, $file)) {
		$_ .= "\r\n";
		if (/^<RcpE/) {
			# have to do it this way to deal with unescaped '"' in name
			my $tmp = $_;
			$tmp =~ s/ img="[^"]*"//;
			$tmp =~ s/ author="([^"]*)"//;
			($name) = $tmp =~ /name="(.*)"/;
			$inrecipe = 1;
			# strip recipe image reference
			s/ img="[^"]*"//;
			$recipe = $_;
		}elsif (/^<\/RcpE/) {
			$recipe .= "</RcpE>\r\n";
			# clean up trailing blank lines inside tags
			$recipe =~ s/[\r\n]+\r\n</\r\n</g;
			my $md5 = md5_base64($recipe);
			next if $md5{$md5}++;
			if (grep($name =~ /$_/,@name)
				+ grep($recipe =~ /$_/,@ingredient,@anywhere,@category) == $match) {
				push(@recipe,{name => $name, recipe => $recipe});
			}
			$name = undef;
			$inrecipe = 0;
		}elsif (/^<Summ/) {
			$insumm = 1;
		}elsif (/<\/Summ>/) {
			$insumm = 0;
		}elsif ($insumm) {
			next;
		}elsif (/<\/mx2>/) {
			next;
		}elsif (defined $name) {
			# strip empty ingredient unit ("1 egg", "2 onions", etc)
			s/\s*unit="\s*"// if /IngR/;
			# convert <open>text\n?<close>\n to <open>\ntext\n<close>\n
			$_ = "$1\r\n$2\r\n" if m|^(<[^>/]+>)([^<]+)(</.*>)?\s*$|;
			$_ .= "$3\r\n" if defined $3;
			# fix self-closing tags, strip completely empty ones
			if (m|^<([^/]\S{3})(.*)/>\s*$|) {
				if ($2 =~ /^\s*$/) {
					next;
				} else {
					$_ = "<$1$2>\r\n</$1>\r\n";
				}
			}
			$recipe .= $_;
		}
	}
	close(In);
}
if (@recipe) {
	if ($listonly) {
		foreach my $ref (@recipe) {
			print decode($ref->{name}),"\n";
		}
	}else{
		print <<EOF;
<?xml version="1.0" standalone="yes" encoding="ISO-8859-1"?>\r
<!DOCTYPE mx2 SYSTEM "mx2.dtd">\r
<mx2 source="mx2grep" date="">\r
<Summ>\r
EOF
		foreach my $ref (sort { $a->{name} cmp $b->{name} } @recipe) {
			print "<Nam>\r\n",$ref->{name},"\r\n</Nam>\r\n";
		}
		print "</Summ>\r\n";
		foreach my $ref (sort { $a->{name} cmp $b->{name} } @recipe) {
			print $ref->{recipe};
		}
		print "</mx2>\r\n";
	}
}
exit 0;

sub decode {
	my $tmp = decode_entities(decode_entities($_[0]));
	return $tmp;
}	

sub slurp {
	my ($fh) = @_;
	do {local $/; <$fh>}
}
