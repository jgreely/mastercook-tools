#!/usr/bin/env perl -CADS

use strict;
use XML::Twig;
use HTML::Entities;
use JSON;
use Getopt::Long qw(:config no_ignore_case bundling);
use Data::Dumper;
$Data::Dumper::Indent = 1;

my %co = (
	R => '[',
	S => '**',
	I => '',
	T => '',
);
my %cc = (
	R => ']',
	S => '**',
	I => '',
	T => '',
);

my $outdir;
GetOptions(
	"outdir|o=s" => \$outdir,
);

my $FILE;
foreach my $file (@ARGV) {
	$FILE=$file;
	my $twig = XML::Twig->new(
		twig_roots => {
			RcpE => \&print_recipe,
			IngR => \&fix_ingr,
		},
	);
	$twig->parsefile($file);
}
exit 0;

sub print_recipe {
	my ($t,$element) = @_;
	# hack to workaround bug in simplify of empty elements inside forcearray
	if ($element->first_child('DirS')) {
		my @DirT = $element->first_child('DirS')->children('DirT');
		foreach my $dirt (@DirT) {
			$dirt->set_text('XXemptyXX') if $dirt->text eq '';
		}
	}
	my $recipe = $element->simplify(
		forcearray => [qw(CatT IngR DirT RatE)],
		normalize_space => 2,
		keyattr => [], # don't create hashes based on 'name' attr
	);
	print_json($recipe);
	$element->delete;
}

sub fix_ingr {
	# this one's pretty much just rory...
	my ($t,$e) = @_;
	if ($e->{att}->{code} and $e->{att}->{unit}
		and $e->{att}->{code} eq $e->{att}->{unit}) {
		$e->set_att(code => 'I');
	}
	if ($e->{att}->{qty} and $e->{att}->{unit}
		and $e->{att}->{qty} eq $e->{att}->{unit}) {
		$e->del_att('unit');
	}
}

sub print_json {
	my ($r) = @_;
	my $file = CleanTitle($r->{name});
	my $dir = $outdir;
	if (!defined $dir) {
		$dir = $FILE;
		$dir =~ s|/.*$||;
		$dir = '.' unless $dir;
	}
	mkdir($dir) if $dir and ! -d $dir;
	if (-f "$dir/$file.json") {
		my $count = 1;
		while (-f "$dir/$file-$count.json") {
			$count++;
		}
		$file .= "-$count";
	}
	my $out = "$dir/$file.json";
	my $recipe = {
		'@context' => 'http://schema.org/',
		'@type' => 'Recipe',
	};
	my $section = $dir;
	$section =~ s/\/$//;
	$section =~ s|^.*/||;
	$recipe->{name} = decode($r->{name})
		if $r->{name};
	$recipe->{author} = decode($r->{author})
		if $r->{author};
	$recipe->{url} = fmescape($r->{AltS}->{source})
		if $r->{AltS} and $r->{AltS}->{label} eq 'Internet address';
	$recipe->{recipeYield} = sprintf("%s %s",toint($r->{Yield}->{qty}),
		$r->{Yield}->{unit})
		if $r->{Yield} and nonzero($r->{Yield}->{qty});
#TODO: figure out if this is accepted, or if I need to put just a
#primary category here
	$recipe->{recipeCategory} = join(", ",map(decode($_),@{$r->{CatS}->{CatT}}))
		if $r->{CatS};
	$recipe->{prepTime} = duration($r->{PrpT}->{elapsed})
		if $r->{PrpT} and nonzero($r->{PrpT}->{elapsed});
	$recipe->{totalTime} = duration($r->{TTim}->{elapsed})
		if $r->{TTim} and nonzero($r->{TTim}->{elapsed});
#TODO: figure out if this is cooking time...
# unlike altsource, unfortunately, this is freeform, so it could be
# bake/baking/broiling/cook/cooking/thawing/simmer/refrigerate, with
# or w/o "Time" appended, and with varying spelling
#	printf Out (qq(alttime = "%s"\n),join(": ",$r->{AltT}->{label},
#		$r->{AltT}->{elapsed}))
#		if $r->{AltT} and nonzero($r->{AltT}->{elapsed});
	$recipe->{recipeCuisine} = decode($r->{Natn})
		if $r->{Natn};
#TODO: try to split out a year and use the rest as the owner
#	printf Out (qq(copyright = "%s"\n),fmescape($r->{CpyR}))
#		if $r->{CpyR};
	$recipe->{description} = decode($r->{Desc})
		if $r->{Desc};
	my %ref;
	if ($r->{IngR}) {
		my $ingredients = [];
		foreach my $i (@{$r->{IngR}}) {
			my $tmp = $i->{qty};
			$tmp .= ' ' . decode($i->{unit}) if defined $i->{unit};
			if ($i->{name}) {
				$tmp .= ' ';
				$ref{fixup(decode($i->{name}))} = CleanTitle($i->{name})
					if $i->{code} and $i->{code} eq 'R';
				$tmp .= $co{$i->{code}} if $i->{code};
				$tmp .= decode($i->{name});
				$tmp .= $cc{$i->{code}} if $i->{code};
			}
			$tmp .= '; ' . decode($i->{IPrp})
				if $i->{IPrp};
			$tmp =~ s/^ *//;
			push(@$ingredients,$tmp);
		}
		$recipe->{recipeIngredient} = $ingredients;
	}
	if ($r->{DirS}) {
		my $instructions = [];
		my $count = 0;
		foreach my $i (@{$r->{DirS}->{DirT}}) {
			if ($i eq 'XXemptyXX') {
				push(@$instructions,"");
			}else{
				$count++;
				push(@$instructions,decode($i));
			}
		}
		$recipe->{recipeInstructions} = $instructions;
	}
	my $instructions = $recipe->{recipeInstructions};
	push(@$instructions,"Serving Instructions: " . decode($r->{SrvI}))
		if $r->{SrvI};
	push(@$instructions,"Serves: " . $r->{Serv}->{qty})
		if $r->{Serv} and nonzero($r->{Serv}->{qty});
	push(@$instructions,"Notes: " . decode($r->{Note}))
		if $r->{Note};
	push(@$instructions,"Wine: " . decode($r->{Wine}))
		if $r->{Wine};
	push(@$instructions,"Source: " . fmescape($r->{Srce}))
		if $r->{Srce};
#TODO: parse this for detailed fields, 
#	print Out "## Nutrition\n\n",$r->{Nutr},"\n\n"
#		if $r->{Nutr};
#TODO: figure out how to put this into aggregateRatings, if at all
#	if ($r->{RatS}) {
#		print Out "## Ratings\n\n";
#		foreach my $rate ($r->{RatS}) {
#			printf Out ("* *%s*: %s\n",decode($rate->{name}),
#				decode($rate->{value}));
#		}
#	}
	# google validator insists that image is not optional
	$recipe->{image} = "http://example.com/fake.jpg";
	open(Out,">$out");
	print Out to_json($recipe,{pretty => 1});
	close(Out);
}
exit 0;

sub duration {
	my ($duration) = @_;
	my ($hour,$minute);
	if (index($duration,":") > -1) {
		($hour,$minute) = split(/:/,$_[0]);
	}elsif ($duration > 59) {
		$hour = int($duration / 60);
		$minute = $duration - $hour * 60;
	}
	my $tmp = 'PT';
	$tmp .= $hour . 'H' if $hour > 0;
	$tmp .= $minute . 'M' if $minute > 0;
	return $tmp;
}

sub nonzero {
	my $tmp = $_[0];
	$tmp =~ tr/0//d;
	return $tmp =~ /[1-9]/;
}

#recipe references often have trailing comments and/or whitespace
sub fixup {
	$_[0] =~ s/^([^(]+)\(.*$/$1/;
	$_[0] =~ s/\s*$//;
	return $_[0];
}

#remove the gratuitous floating point precision
sub toint {
	$_[0] =~ s/0+$//;
	$_[0] =~ s/([0-9])\.$/$1/;
	return $_[0];
}

sub decode {
	my $tmp = decode_entities(decode_entities($_[0]));
	return $tmp;
}	

sub fmescape {
	my $tmp = decode_entities(decode_entities($_[0]));
	$tmp =~ s/"/\\"/g;
	$tmp =~ s/\\$//; # one damn recipe where Srce ends in '\'...
	return $tmp;
}

#Clean up a string so it can be used as a filename/anchor.
#Take advantage of the fact that we've converted accented characters
#to usefully-named HTML entities, and replace them with the plain
#character (this routine is also used in the search-engine filter).
#
sub CleanTitle {
	$_ = $_[0];
	s/\s*$//;
	s/\&(.)grave;/$1/g;
	s/\&(.)acute;/$1/g;
	s/\&(.)circ;/$1/g;
	s/\&(.)tilde;/$1/g;
	s/\&(.)uml;/$1/g;
	s/\&(.)ring;/$1/g;
	s/&[a-z]+;//g;
	tr/ A-Z/-a-z/;
	s/<[^>]+>//g;
	s/[^-a-z0-9]//g;
	s/-{2,}/-/g;
	s/^-//;
	s/-$//;
	return $_;
}
