#!/usr/bin/env perl

# split up an MX2 file into single-recipe files, to make it easier
# to clean it up. Recombine with mx2cat.

use strict;
use Digest::MD5 qw(md5_base64);
use Getopt::Long qw(:config no_ignore_case bundling);

my $prefix = "recipe-";
GetOptions(
	"prefix|p=s" => \$prefix,
) or die "Usage: $0 [--prefix path] [mx2file]\n";

push (@ARGV,'-') unless @ARGV;

my @recipe;
my %md5;
foreach my $file (@ARGV) {
	my $In;
	if ($file eq '-') {
		open($In,"<-:bytes");
	}else{
		open($In,"<:bytes",$file) or die "$0: $file: $!\n";
	}
	my $recipe;
	my $name;
	my $insumm;
	my $inrecipe;
	my $file = slurp($In);
	close($In);
	$file =~ s/></>\n</g;
	$file =~ tr/\r//d;
	foreach (split(/\n/, $file)) {
		$_ .= "\r\n";
		if (/^<RcpE/) {
			# have to do it this way to deal with unescaped '"' in name
			my $tmp = $_;
			$tmp =~ s/ img="[^"]*"//;
			$tmp =~ s/ author="([^"]*)"//;
			($name) = $tmp =~ /name="(.*)"/;
			$inrecipe = 1;
			# strip recipe image reference
			s/ img="[^"]*"//;
			$recipe = $_;
		}elsif (/^<\/RcpE/) {
			$recipe .= "</RcpE>\r\n";
			# clean up leading blank lines inside tags
			$recipe =~ s/>[\r\n]+/>\r\n/g;
			# clean up trailing blank lines inside tags
			$recipe =~ s/[\r\n]+\r\n</\r\n</g;
			my $md5 = md5_base64($recipe);
			next if $md5{$md5}++;
			push(@recipe,{name => $name, recipe => $recipe});
			$name = undef;
			$inrecipe = 0;
		}elsif (/^<Summ/) {
			$insumm = 1;
		}elsif (/<\/Summ>/) {
			$insumm = 0;
		}elsif ($insumm) {
			next;
		}elsif (/<\/mx2>/) {
			next;
		}elsif (defined $name) {
			# strip empty ingredient unit ("1 egg", "2 onions", etc)
			s/\s*unit="\s*"// if /IngR/;
			# convert <open>text\n?<close>\n to <open>\ntext\n<close>\n
			$_ = "$1\r\n$2\r\n" if m|^(<[^>/]+>)([^<]+)(</.*>)?\s*$|;
			$_ .= "$3\r\n" if defined $3;
			# fix self-closing tags, strip completely empty ones
			if (m|^<([^/]\S{3,})(.*)/>.*$|) {
				if ($2 =~ /^\s*$/) {
					next;
				} else {
					$_ = "<$1$2>\r\n</$1>\r\n";
				}
			}
			$recipe .= $_;
		}
	}
	close(In);
}
if (@recipe) {
	my $count = 0;
	foreach my $ref (sort { $a->{name} cmp $b->{name} } @recipe) {
		my $Out = sprintf("%s%05d.mx2",$prefix,$count++);
		open(Out,sprintf(">$Out")) or die "$0: $Out: $!\n";
		print Out <<EOF;
<?xml version="1.0" standalone="yes" encoding="ISO-8859-1"?>\r
<!DOCTYPE mx2 SYSTEM "mx2.dtd">\r
<mx2 source="mx2split" date="">\r
<Summ>\r
EOF
		print Out "<Nam>\r\n",$ref->{name},"\r\n</Nam>\r\n";
		print Out "</Summ>\r\n";
		print Out $ref->{recipe};
		print Out "</mx2>\r\n";
	}
	close(Out);
}
exit 0;

sub slurp {
	my ($fh) = @_;
	do {local $/; <$fh>}
}
